/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AttrInjector {
        "attrs": any;
    }
    interface CdcApp {
    }
    interface CdcCardActivity {
        "cardtitle": string;
        "categorie": string;
        "end": string;
        "href": string;
        "img": string;
        "localisation": string;
        "peoples": string;
        "start": string;
    }
    interface CdcCardEvents {
        "cardtitle": string;
        "categorie": string;
        "date": string;
        "href": string;
        "img": string;
        "localisation": string;
        "peoples": string;
    }
    interface CdcCardGrid {
    }
    interface CdcCardRow {
    }
    interface CdcCheckbox {
        "checked": boolean;
        "text": string;
    }
    interface CdcCreneau {
        "creneauid": string;
        "deletable": boolean;
        "reservation": boolean;
        "selectable": boolean;
        "selected": boolean;
    }
    interface CdcCreneauTable {
    }
    interface CdcDatePicker {
        "text": string;
    }
    interface CdcDropdown {
        "placeholder": string;
    }
    interface CdcErrors {
    }
    interface CdcFilterDropdown {
        "placeholder": string;
    }
    interface CdcHeader {
    }
    interface CdcImageUpload {
        "img": string;
        "name": string;
        "placeholder": string;
    }
    interface CdcModal {
        "active": boolean;
    }
    interface CdcNav {
    }
    interface CdcPeriodPicker {
        "begin": string;
        "end": string;
    }
    interface CdcSearchInput {
        "datalist": string;
        "placeholder": string;
    }
    interface CdcSimpleCheckbox {
        "checked": boolean;
        "text": string;
    }
    interface CdcTable {
        "goToPage": number;
        "numberofpages": number;
        "pageselector": boolean;
    }
    interface CdcTableLine {
    }
    interface CdcTimePicker {
        "text": string;
    }
    interface CdcTimetablePicker {
        "begin": string;
        "end": string;
    }
    interface MainButtonAdd {
        "color": string;
    }
    interface MainButtonModify {
        "color": string;
    }
    interface MainButtonMultiAdd {
    }
    interface MainButtonSave {
        "autocheck": boolean;
        "isvalid": boolean;
        "loading": boolean;
    }
    interface MainButtonShare {
    }
    interface MultiSelect {
    }
    interface PageSelector {
        "gotopage": number;
        "numberofpages": number;
    }
    interface PlusButton {
    }
}
declare global {
    interface HTMLAttrInjectorElement extends Components.AttrInjector, HTMLStencilElement {
    }
    var HTMLAttrInjectorElement: {
        prototype: HTMLAttrInjectorElement;
        new (): HTMLAttrInjectorElement;
    };
    interface HTMLCdcAppElement extends Components.CdcApp, HTMLStencilElement {
    }
    var HTMLCdcAppElement: {
        prototype: HTMLCdcAppElement;
        new (): HTMLCdcAppElement;
    };
    interface HTMLCdcCardActivityElement extends Components.CdcCardActivity, HTMLStencilElement {
    }
    var HTMLCdcCardActivityElement: {
        prototype: HTMLCdcCardActivityElement;
        new (): HTMLCdcCardActivityElement;
    };
    interface HTMLCdcCardEventsElement extends Components.CdcCardEvents, HTMLStencilElement {
    }
    var HTMLCdcCardEventsElement: {
        prototype: HTMLCdcCardEventsElement;
        new (): HTMLCdcCardEventsElement;
    };
    interface HTMLCdcCardGridElement extends Components.CdcCardGrid, HTMLStencilElement {
    }
    var HTMLCdcCardGridElement: {
        prototype: HTMLCdcCardGridElement;
        new (): HTMLCdcCardGridElement;
    };
    interface HTMLCdcCardRowElement extends Components.CdcCardRow, HTMLStencilElement {
    }
    var HTMLCdcCardRowElement: {
        prototype: HTMLCdcCardRowElement;
        new (): HTMLCdcCardRowElement;
    };
    interface HTMLCdcCheckboxElement extends Components.CdcCheckbox, HTMLStencilElement {
    }
    var HTMLCdcCheckboxElement: {
        prototype: HTMLCdcCheckboxElement;
        new (): HTMLCdcCheckboxElement;
    };
    interface HTMLCdcCreneauElement extends Components.CdcCreneau, HTMLStencilElement {
    }
    var HTMLCdcCreneauElement: {
        prototype: HTMLCdcCreneauElement;
        new (): HTMLCdcCreneauElement;
    };
    interface HTMLCdcCreneauTableElement extends Components.CdcCreneauTable, HTMLStencilElement {
    }
    var HTMLCdcCreneauTableElement: {
        prototype: HTMLCdcCreneauTableElement;
        new (): HTMLCdcCreneauTableElement;
    };
    interface HTMLCdcDatePickerElement extends Components.CdcDatePicker, HTMLStencilElement {
    }
    var HTMLCdcDatePickerElement: {
        prototype: HTMLCdcDatePickerElement;
        new (): HTMLCdcDatePickerElement;
    };
    interface HTMLCdcDropdownElement extends Components.CdcDropdown, HTMLStencilElement {
    }
    var HTMLCdcDropdownElement: {
        prototype: HTMLCdcDropdownElement;
        new (): HTMLCdcDropdownElement;
    };
    interface HTMLCdcErrorsElement extends Components.CdcErrors, HTMLStencilElement {
    }
    var HTMLCdcErrorsElement: {
        prototype: HTMLCdcErrorsElement;
        new (): HTMLCdcErrorsElement;
    };
    interface HTMLCdcFilterDropdownElement extends Components.CdcFilterDropdown, HTMLStencilElement {
    }
    var HTMLCdcFilterDropdownElement: {
        prototype: HTMLCdcFilterDropdownElement;
        new (): HTMLCdcFilterDropdownElement;
    };
    interface HTMLCdcHeaderElement extends Components.CdcHeader, HTMLStencilElement {
    }
    var HTMLCdcHeaderElement: {
        prototype: HTMLCdcHeaderElement;
        new (): HTMLCdcHeaderElement;
    };
    interface HTMLCdcImageUploadElement extends Components.CdcImageUpload, HTMLStencilElement {
    }
    var HTMLCdcImageUploadElement: {
        prototype: HTMLCdcImageUploadElement;
        new (): HTMLCdcImageUploadElement;
    };
    interface HTMLCdcModalElement extends Components.CdcModal, HTMLStencilElement {
    }
    var HTMLCdcModalElement: {
        prototype: HTMLCdcModalElement;
        new (): HTMLCdcModalElement;
    };
    interface HTMLCdcNavElement extends Components.CdcNav, HTMLStencilElement {
    }
    var HTMLCdcNavElement: {
        prototype: HTMLCdcNavElement;
        new (): HTMLCdcNavElement;
    };
    interface HTMLCdcPeriodPickerElement extends Components.CdcPeriodPicker, HTMLStencilElement {
    }
    var HTMLCdcPeriodPickerElement: {
        prototype: HTMLCdcPeriodPickerElement;
        new (): HTMLCdcPeriodPickerElement;
    };
    interface HTMLCdcSearchInputElement extends Components.CdcSearchInput, HTMLStencilElement {
    }
    var HTMLCdcSearchInputElement: {
        prototype: HTMLCdcSearchInputElement;
        new (): HTMLCdcSearchInputElement;
    };
    interface HTMLCdcSimpleCheckboxElement extends Components.CdcSimpleCheckbox, HTMLStencilElement {
    }
    var HTMLCdcSimpleCheckboxElement: {
        prototype: HTMLCdcSimpleCheckboxElement;
        new (): HTMLCdcSimpleCheckboxElement;
    };
    interface HTMLCdcTableElement extends Components.CdcTable, HTMLStencilElement {
    }
    var HTMLCdcTableElement: {
        prototype: HTMLCdcTableElement;
        new (): HTMLCdcTableElement;
    };
    interface HTMLCdcTableLineElement extends Components.CdcTableLine, HTMLStencilElement {
    }
    var HTMLCdcTableLineElement: {
        prototype: HTMLCdcTableLineElement;
        new (): HTMLCdcTableLineElement;
    };
    interface HTMLCdcTimePickerElement extends Components.CdcTimePicker, HTMLStencilElement {
    }
    var HTMLCdcTimePickerElement: {
        prototype: HTMLCdcTimePickerElement;
        new (): HTMLCdcTimePickerElement;
    };
    interface HTMLCdcTimetablePickerElement extends Components.CdcTimetablePicker, HTMLStencilElement {
    }
    var HTMLCdcTimetablePickerElement: {
        prototype: HTMLCdcTimetablePickerElement;
        new (): HTMLCdcTimetablePickerElement;
    };
    interface HTMLMainButtonAddElement extends Components.MainButtonAdd, HTMLStencilElement {
    }
    var HTMLMainButtonAddElement: {
        prototype: HTMLMainButtonAddElement;
        new (): HTMLMainButtonAddElement;
    };
    interface HTMLMainButtonModifyElement extends Components.MainButtonModify, HTMLStencilElement {
    }
    var HTMLMainButtonModifyElement: {
        prototype: HTMLMainButtonModifyElement;
        new (): HTMLMainButtonModifyElement;
    };
    interface HTMLMainButtonMultiAddElement extends Components.MainButtonMultiAdd, HTMLStencilElement {
    }
    var HTMLMainButtonMultiAddElement: {
        prototype: HTMLMainButtonMultiAddElement;
        new (): HTMLMainButtonMultiAddElement;
    };
    interface HTMLMainButtonSaveElement extends Components.MainButtonSave, HTMLStencilElement {
    }
    var HTMLMainButtonSaveElement: {
        prototype: HTMLMainButtonSaveElement;
        new (): HTMLMainButtonSaveElement;
    };
    interface HTMLMainButtonShareElement extends Components.MainButtonShare, HTMLStencilElement {
    }
    var HTMLMainButtonShareElement: {
        prototype: HTMLMainButtonShareElement;
        new (): HTMLMainButtonShareElement;
    };
    interface HTMLMultiSelectElement extends Components.MultiSelect, HTMLStencilElement {
    }
    var HTMLMultiSelectElement: {
        prototype: HTMLMultiSelectElement;
        new (): HTMLMultiSelectElement;
    };
    interface HTMLPageSelectorElement extends Components.PageSelector, HTMLStencilElement {
    }
    var HTMLPageSelectorElement: {
        prototype: HTMLPageSelectorElement;
        new (): HTMLPageSelectorElement;
    };
    interface HTMLPlusButtonElement extends Components.PlusButton, HTMLStencilElement {
    }
    var HTMLPlusButtonElement: {
        prototype: HTMLPlusButtonElement;
        new (): HTMLPlusButtonElement;
    };
    interface HTMLElementTagNameMap {
        "attr-injector": HTMLAttrInjectorElement;
        "cdc-app": HTMLCdcAppElement;
        "cdc-card-activity": HTMLCdcCardActivityElement;
        "cdc-card-events": HTMLCdcCardEventsElement;
        "cdc-card-grid": HTMLCdcCardGridElement;
        "cdc-card-row": HTMLCdcCardRowElement;
        "cdc-checkbox": HTMLCdcCheckboxElement;
        "cdc-creneau": HTMLCdcCreneauElement;
        "cdc-creneau-table": HTMLCdcCreneauTableElement;
        "cdc-date-picker": HTMLCdcDatePickerElement;
        "cdc-dropdown": HTMLCdcDropdownElement;
        "cdc-errors": HTMLCdcErrorsElement;
        "cdc-filter-dropdown": HTMLCdcFilterDropdownElement;
        "cdc-header": HTMLCdcHeaderElement;
        "cdc-image-upload": HTMLCdcImageUploadElement;
        "cdc-modal": HTMLCdcModalElement;
        "cdc-nav": HTMLCdcNavElement;
        "cdc-period-picker": HTMLCdcPeriodPickerElement;
        "cdc-search-input": HTMLCdcSearchInputElement;
        "cdc-simple-checkbox": HTMLCdcSimpleCheckboxElement;
        "cdc-table": HTMLCdcTableElement;
        "cdc-table-line": HTMLCdcTableLineElement;
        "cdc-time-picker": HTMLCdcTimePickerElement;
        "cdc-timetable-picker": HTMLCdcTimetablePickerElement;
        "main-button-add": HTMLMainButtonAddElement;
        "main-button-modify": HTMLMainButtonModifyElement;
        "main-button-multi-add": HTMLMainButtonMultiAddElement;
        "main-button-save": HTMLMainButtonSaveElement;
        "main-button-share": HTMLMainButtonShareElement;
        "multi-select": HTMLMultiSelectElement;
        "page-selector": HTMLPageSelectorElement;
        "plus-button": HTMLPlusButtonElement;
    }
}
declare namespace LocalJSX {
    interface AttrInjector {
        "attrs"?: any;
    }
    interface CdcApp {
    }
    interface CdcCardActivity {
        "cardtitle"?: string;
        "categorie"?: string;
        "end"?: string;
        "href"?: string;
        "img"?: string;
        "localisation"?: string;
        "peoples"?: string;
        "start"?: string;
    }
    interface CdcCardEvents {
        "cardtitle"?: string;
        "categorie"?: string;
        "date"?: string;
        "href"?: string;
        "img"?: string;
        "localisation"?: string;
        "peoples"?: string;
    }
    interface CdcCardGrid {
    }
    interface CdcCardRow {
    }
    interface CdcCheckbox {
        "checked"?: boolean;
        "text"?: string;
    }
    interface CdcCreneau {
        "creneauid"?: string;
        "deletable"?: boolean;
        "onDeletecreneau"?: (event: CustomEvent<{ id: string }>) => void;
        "onSelectcreneau"?: (event: CustomEvent<{ state: boolean; id: string }>) => void;
        "reservation"?: boolean;
        "selectable"?: boolean;
        "selected"?: boolean;
    }
    interface CdcCreneauTable {
    }
    interface CdcDatePicker {
        "text"?: string;
    }
    interface CdcDropdown {
        "placeholder"?: string;
    }
    interface CdcErrors {
    }
    interface CdcFilterDropdown {
        "placeholder"?: string;
    }
    interface CdcHeader {
    }
    interface CdcImageUpload {
        "img"?: string;
        "name"?: string;
        "placeholder"?: string;
    }
    interface CdcModal {
        "active"?: boolean;
    }
    interface CdcNav {
    }
    interface CdcPeriodPicker {
        "begin"?: string;
        "end"?: string;
    }
    interface CdcSearchInput {
        "datalist"?: string;
        "placeholder"?: string;
    }
    interface CdcSimpleCheckbox {
        "checked"?: boolean;
        "text"?: string;
    }
    interface CdcTable {
        "goToPage"?: number;
        "numberofpages"?: number;
        "pageselector"?: boolean;
    }
    interface CdcTableLine {
    }
    interface CdcTimePicker {
        "text"?: string;
    }
    interface CdcTimetablePicker {
        "begin"?: string;
        "end"?: string;
    }
    interface MainButtonAdd {
        "color"?: string;
    }
    interface MainButtonModify {
        "color"?: string;
        "onDelete"?: (event: CustomEvent<boolean>) => void;
        "onModify"?: (event: CustomEvent<boolean>) => void;
    }
    interface MainButtonMultiAdd {
    }
    interface MainButtonSave {
        "autocheck"?: boolean;
        "isvalid"?: boolean;
        "loading"?: boolean;
    }
    interface MainButtonShare {
    }
    interface MultiSelect {
    }
    interface PageSelector {
        "gotopage"?: number;
        "numberofpages"?: number;
        "onTablegotopage"?: (event: CustomEvent<number>) => void;
    }
    interface PlusButton {
    }
    interface IntrinsicElements {
        "attr-injector": AttrInjector;
        "cdc-app": CdcApp;
        "cdc-card-activity": CdcCardActivity;
        "cdc-card-events": CdcCardEvents;
        "cdc-card-grid": CdcCardGrid;
        "cdc-card-row": CdcCardRow;
        "cdc-checkbox": CdcCheckbox;
        "cdc-creneau": CdcCreneau;
        "cdc-creneau-table": CdcCreneauTable;
        "cdc-date-picker": CdcDatePicker;
        "cdc-dropdown": CdcDropdown;
        "cdc-errors": CdcErrors;
        "cdc-filter-dropdown": CdcFilterDropdown;
        "cdc-header": CdcHeader;
        "cdc-image-upload": CdcImageUpload;
        "cdc-modal": CdcModal;
        "cdc-nav": CdcNav;
        "cdc-period-picker": CdcPeriodPicker;
        "cdc-search-input": CdcSearchInput;
        "cdc-simple-checkbox": CdcSimpleCheckbox;
        "cdc-table": CdcTable;
        "cdc-table-line": CdcTableLine;
        "cdc-time-picker": CdcTimePicker;
        "cdc-timetable-picker": CdcTimetablePicker;
        "main-button-add": MainButtonAdd;
        "main-button-modify": MainButtonModify;
        "main-button-multi-add": MainButtonMultiAdd;
        "main-button-save": MainButtonSave;
        "main-button-share": MainButtonShare;
        "multi-select": MultiSelect;
        "page-selector": PageSelector;
        "plus-button": PlusButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "attr-injector": LocalJSX.AttrInjector & JSXBase.HTMLAttributes<HTMLAttrInjectorElement>;
            "cdc-app": LocalJSX.CdcApp & JSXBase.HTMLAttributes<HTMLCdcAppElement>;
            "cdc-card-activity": LocalJSX.CdcCardActivity & JSXBase.HTMLAttributes<HTMLCdcCardActivityElement>;
            "cdc-card-events": LocalJSX.CdcCardEvents & JSXBase.HTMLAttributes<HTMLCdcCardEventsElement>;
            "cdc-card-grid": LocalJSX.CdcCardGrid & JSXBase.HTMLAttributes<HTMLCdcCardGridElement>;
            "cdc-card-row": LocalJSX.CdcCardRow & JSXBase.HTMLAttributes<HTMLCdcCardRowElement>;
            "cdc-checkbox": LocalJSX.CdcCheckbox & JSXBase.HTMLAttributes<HTMLCdcCheckboxElement>;
            "cdc-creneau": LocalJSX.CdcCreneau & JSXBase.HTMLAttributes<HTMLCdcCreneauElement>;
            "cdc-creneau-table": LocalJSX.CdcCreneauTable & JSXBase.HTMLAttributes<HTMLCdcCreneauTableElement>;
            "cdc-date-picker": LocalJSX.CdcDatePicker & JSXBase.HTMLAttributes<HTMLCdcDatePickerElement>;
            "cdc-dropdown": LocalJSX.CdcDropdown & JSXBase.HTMLAttributes<HTMLCdcDropdownElement>;
            "cdc-errors": LocalJSX.CdcErrors & JSXBase.HTMLAttributes<HTMLCdcErrorsElement>;
            "cdc-filter-dropdown": LocalJSX.CdcFilterDropdown & JSXBase.HTMLAttributes<HTMLCdcFilterDropdownElement>;
            "cdc-header": LocalJSX.CdcHeader & JSXBase.HTMLAttributes<HTMLCdcHeaderElement>;
            "cdc-image-upload": LocalJSX.CdcImageUpload & JSXBase.HTMLAttributes<HTMLCdcImageUploadElement>;
            "cdc-modal": LocalJSX.CdcModal & JSXBase.HTMLAttributes<HTMLCdcModalElement>;
            "cdc-nav": LocalJSX.CdcNav & JSXBase.HTMLAttributes<HTMLCdcNavElement>;
            "cdc-period-picker": LocalJSX.CdcPeriodPicker & JSXBase.HTMLAttributes<HTMLCdcPeriodPickerElement>;
            "cdc-search-input": LocalJSX.CdcSearchInput & JSXBase.HTMLAttributes<HTMLCdcSearchInputElement>;
            "cdc-simple-checkbox": LocalJSX.CdcSimpleCheckbox & JSXBase.HTMLAttributes<HTMLCdcSimpleCheckboxElement>;
            "cdc-table": LocalJSX.CdcTable & JSXBase.HTMLAttributes<HTMLCdcTableElement>;
            "cdc-table-line": LocalJSX.CdcTableLine & JSXBase.HTMLAttributes<HTMLCdcTableLineElement>;
            "cdc-time-picker": LocalJSX.CdcTimePicker & JSXBase.HTMLAttributes<HTMLCdcTimePickerElement>;
            "cdc-timetable-picker": LocalJSX.CdcTimetablePicker & JSXBase.HTMLAttributes<HTMLCdcTimetablePickerElement>;
            "main-button-add": LocalJSX.MainButtonAdd & JSXBase.HTMLAttributes<HTMLMainButtonAddElement>;
            "main-button-modify": LocalJSX.MainButtonModify & JSXBase.HTMLAttributes<HTMLMainButtonModifyElement>;
            "main-button-multi-add": LocalJSX.MainButtonMultiAdd & JSXBase.HTMLAttributes<HTMLMainButtonMultiAddElement>;
            "main-button-save": LocalJSX.MainButtonSave & JSXBase.HTMLAttributes<HTMLMainButtonSaveElement>;
            "main-button-share": LocalJSX.MainButtonShare & JSXBase.HTMLAttributes<HTMLMainButtonShareElement>;
            "multi-select": LocalJSX.MultiSelect & JSXBase.HTMLAttributes<HTMLMultiSelectElement>;
            "page-selector": LocalJSX.PageSelector & JSXBase.HTMLAttributes<HTMLPageSelectorElement>;
            "plus-button": LocalJSX.PlusButton & JSXBase.HTMLAttributes<HTMLPlusButtonElement>;
        }
    }
}
